version = ""
imageName = "backend"
devTag = "0.0-0"
CICD_PROJECT = "ci-cd"
DEV_PROJECT = "dev"

node('dotnet-31') {

  stage('Checkout Source') {
	checkout scm
  }
  
  stage('Prepare Variable') {
	dir('app') {
	  script {
		def props = readProperties  file:'build.properties'
		version = props['version']
		devTag = "${version}-" + currentBuild.number
		echo "Image Name: ${imageName}"
		echo "version: ${version}"
		echo "devTag: ${devTag}"
		echo "CICD Project: ${CICD_PROJECT}"
		echo "Development Project: ${DEV_PROJECT}"
	  }
	}
  }
  
  stage('Restore') {
    dir('app') {
      sh "dotnet restore app.csproj --configfile nuget.config --force --verbosity d"
    }
  }
  
  stage('Publish') {
	dir('app') {
	  sh "dotnet publish app.csproj --no-restore -c Release"
	}
  }
  stage('Unit Test'){
	echo 'Todo: Unit Test'
  }
  
  stage('Code Analysis'){
	echo 'Todo: Code Analysis' 
  }
  
  stage('Create Build Config') {
    script{
	  if(openshift.withCluster() {
        openshift.withProject("${CICD_PROJECT}") {
          return !openshift.selector("bc", "${imageName}").exists()
        }
      }){
        echo "Create build config ${imageName}:latest"
	    dir('app') {
          sh "oc -n ${CICD_PROJECT} new-build --name=${imageName} dotnet:3.1 --binary=true || true"
        }
	  }	
	}
  }
  
  stage('Create Service') {
    script{
	  if(openshift.withCluster() {
		openshift.withProject("${DEV_PROJECT}") {
		  return !openshift.selector("svc", "${imageName}").exists()
		}
	  }){
		openshift.withCluster() {
		  openshift.withProject("${DEV_PROJECT}") {
		    def template = './bin/backend-svc-dev.yaml'
			openshift.apply(
			  openshift.process("-f", template)
			)
		  }
		}	
	  }	
	}
  }
  
  stage('Create Route') {
	script{
	  if(openshift.withCluster() {
        openshift.withProject("${DEV_PROJECT}") {
          return !openshift.selector("route", "${imageName}").exists()
        }
      }){
        openshift.withCluster() {
          openshift.withProject("${DEV_PROJECT}") {
            def template = './bin/backend-route-dev.yaml'
            openshift.apply(
              openshift.process("-f", template)
            )
          }
        }	  
	  }
    }	
  }

  stage('Build Container Image') {
    script{
	  echo "Build Container Image ${imageName}"
	  dir('app') {
        sh "oc -n ${CICD_PROJECT} start-build ${imageName} --from-dir=bin/Release/netcoreapp3.1/publish --follow"
		sh "oc tag ${imageName}:latest ${imageName}:${devTag}"
      }
    }	
  }
 
  stage('Create Deployment Config') {
    script{
	  echo "Create deployment config: ${DEV_PROJECT}"
      openshift.withCluster() {
        openshift.withProject("${DEV_PROJECT}") {
          def template = './bin/backend-dc-dev.yaml'
          openshift.apply(
            openshift.process(
              "-f", template,
              "-p", "IMAGE_TAG=${devTag}",
              "-p", "APP_VERSION=${version}"
            )
          )
        }
      }
    }	
  }
 
}
