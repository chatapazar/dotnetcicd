version = ""
imageName = "backend"
devTag = "0.0-0"
CICD_PROJECT = "ci-cd"
DEV_PROJECT = "dev"

node('dotnet-31') {

  stage('Checkout Source') {
	checkout scm
  }
  stage('Prepare Variable') {
	dir('app') {
	  script {
		def props = readProperties  file:'build.properties'
		version = props['version']
		devTag = "${version}-" + currentBuild.number
		echo "Image Name: ${imageName}"
		echo "version: ${version}"
		echo "devTag: ${devTag}"
		echo "CICD Project: ${CICD_PROJECT}"
		echo "Development Project: ${DEV_PROJECT}"
	  }
	}
  }
  stage('Restore') {
    dir('app') {
	  sh "dotnet restore app.csproj --configfile nuget.config --force --verbosity d"
	}
  }
  stage('Publish') {
	dir('app') {
	  sh "dotnet publish app.csproj --no-restore -c Release"
	}
  }
  stage('Create Build Config') {
    when {
      expression {
        openshift.withCluster() {
          openshift.withProject(env.CICD_PROJECT) {
            return !openshift.selector("bc", "${imageName}").exists()
          }
        }
      }
    }
    steps {
      echo "Create build config ${imageName}:latest"
      dir('app') {
        sh 'dotnet --version'
      }
     }
  }

  
}
